---
apiVersion: v1
kind: Template
labels:
  app: ${APP_NAME}-${INSTANCE}
  env: ${LABEL_ENV}
  role: ${APP_NAME}
  template: ${APP_NAME}-${INSTANCE}-template
metadata:
  name: ${APP_NAME}-${INSTANCE}-template
objects:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: ${APP_NAME}-${INSTANCE}-config
    data:
      elasticsearch.yml: |
        xpack.security.enabled: true
        xpack.security.transport.ssl.enabled: true
        xpack.security.transport.ssl.verification_mode: certificate
        xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elasticsearch-certificates.p12
        xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elasticsearch-certificates.p12
        xpack.security.http.ssl.enabled: true
        xpack.security.http.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elasticsearch-certificates.p12
        xpack.security.http.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elasticsearch-certificates.p12

  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APP_NAME}-${INSTANCE}
    spec:
      ports:
        - name: http
          port: 9200
          protocol: TCP
        - name: transport
          port: 9300
          protocol: TCP
      selector:
        app: ${APP_NAME}-${INSTANCE}
        env: ${LABEL_ENV}
        role: ${APP_NAME}

  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      name: ${APP_NAME}-${INSTANCE}-headless
    spec:
      clusterIP: None
      ports:
        - name: http
          port: 9200
        - name: transport
          port: 9300
      publishNotReadyAddresses: true
      selector:
        app: ${APP_NAME}-${INSTANCE}
        env: ${LABEL_ENV}
        role: ${APP_NAME}

  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      annotations:
        esMajorVersion: "7"
      name: ${APP_NAME}-${INSTANCE}
    spec:
      podManagementPolicy: Parallel
      replicas: 3
      selector:
        matchLabels:
          app: ${APP_NAME}-${INSTANCE}
          env: ${LABEL_ENV}
          role: ${APP_NAME}
      serviceName: ${APP_NAME}-${INSTANCE}-headless
      template:
        metadata:
          labels:
            app: ${APP_NAME}-${INSTANCE}
            env: ${LABEL_ENV}
            role: ${APP_NAME}
          name: ${APP_NAME}-${INSTANCE}
        spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: app
                        operator: In
                        values:
                          - ${APP_NAME}-${INSTANCE}
                  topologyKey: kubernetes.io/hostname
          containers:
            - env:
                - name: node.name
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: cluster.initial_master_nodes
                  value: ${APP_NAME}-${INSTANCE}-0,${APP_NAME}-${INSTANCE}-1,${APP_NAME}-${INSTANCE}-2,
                - name: discovery.seed_hosts
                  value: ${APP_NAME}-${INSTANCE}-headless
                - name: cluster.name
                  value: ${APP_NAME}
                - name: network.host
                  value: 0.0.0.0
                - name: ES_JAVA_OPTS
                  value: -Xmx1g -Xms1g
                - name: node.data
                  value: "true"
                - name: node.ingest
                  value: "true"
                - name: node.master
                  value: "true"
                - name: ELASTIC_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: ${APP_NAME}-${INSTANCE}-credentials
                - name: ELASTIC_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: ${APP_NAME}-${INSTANCE}-credentials
              image: elastic/elasticsearch:${ELASTIC_VERSION}
              imagePullPolicy: IfNotPresent
              name: ${APP_NAME}
              ports:
                - containerPort: 9200
                  name: http
                - containerPort: 9300
                  name: transport
              readinessProbe:
                exec:
                  command:
                    - sh
                    - -c
                    - |
                      #!/usr/bin/env bash -e
                      # If the node is starting up wait for the cluster to be ready (request params: 'wait_for_status=green&timeout=1s' )
                      # Once it has started only check that the node itself is responding
                      START_FILE=/tmp/.es_start_file

                      http () {
                          local path="${1}"
                          if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                            BASIC_AUTH="-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
                          else
                            BASIC_AUTH=''
                          fi
                          curl -XGET -s -k --fail ${BASIC_AUTH} https://127.0.0.1:9200${path}
                      }

                      if [ -f "${START_FILE}" ]; then
                          echo 'Elasticsearch is already running, lets check the node is healthy and there are master nodes available'
                          http "/_cluster/health?timeout=0s"
                      else
                          echo 'Waiting for elasticsearch cluster to become cluster to be ready (request params: "wait_for_status=green&timeout=1s" )'
                          if http "/_cluster/health?wait_for_status=green&timeout=1s" ; then
                              touch ${START_FILE}
                              exit 0
                          else
                              echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                              exit 1
                          fi
                      fi
                failureThreshold: 3
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 3
                timeoutSeconds: 5
              resources:
                limits:
                  cpu: "${CPU_LIMIT}"
                  memory: "${MEMORY_LIMIT}"
                requests:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
              volumeMounts:
                - mountPath: /usr/share/elasticsearch/config/certs
                  name: elastic-certificates
                - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
                  name: esconfig
                  subPath: elasticsearch.yml
                - mountPath: /usr/share/elasticsearch/data
                  name: elasticsearch-data
          terminationGracePeriodSeconds: 120
          volumes:
            - name: elastic-certificates
              secret:
                secretName: ${APP_NAME}-${INSTANCE}-certificates
            - name: esconfig
              configMap:
                name: ${APP_NAME}-${INSTANCE}-config
      updateStrategy:
        type: RollingUpdate
      volumeClaimTemplates:
      - metadata:
          annotations:
            volume.beta.kubernetes.io/storage-class: "${STORAGE_CLASS}"
          labels:
            app: "${APP_NAME}-${INSTANCE}"
          name: elasticsearch-data
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: "${PVC_SIZE}"
          storageClassName: "${STORAGE_CLASS}"
parameters:
  - name: APP_NAME
    description: Application name
    displayName: Application name
    required: true
    value: elasticsearch
  - name: ELASTIC_VERSION
    description: Application version of Elastic Stack in string format
    displayName: Application version
    required: true
    value: "7.5.1"
  - name: LABEL_ENV
    description: Deployment environment
    displayName: Environment
    required: true
    value: dev
  - name: INSTANCE
    description: The deployment instance name
    displayName: Deployment Instance
    required: true
    value: master
  - name: CPU_LIMIT
    description: Limit Peak CPU per pod (in millicores ex. 1000m)
    displayName: CPU Limit
    value: 1000m
  - name: CPU_REQUEST
    description: Requested CPU per pod (in millicores ex. 500m)
    displayName: CPU Request
    value: 100m
  - name: MEMORY_LIMIT
    description: Limit Peak Memory per pod (in gigabytes Gi or megabytes Mi ex. 2Gi)
    displayName: Memory Limit
    value: 2Gi
  - name: MEMORY_REQUEST
    description: Requested Memory per pod (in gigabytes Gi or megabytes Mi ex. 500Mi)
    displayName: Memory Request
    value: 1.5Gi
  - name: PVC_SIZE
    description: The size of the persistent volume to create.
    displayName: Persistent Volume Size
    required: true
    value: 5Gi
  - name: STORAGE_CLASS
    description: The type of the persistent volume to create.
    displayName: Persistent Volume Class
    required: true
    value: netapp-file-standard
